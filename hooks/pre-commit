#!/usr/bin/php
<?php
include_once __DIR__.'/helpers/console.php';
include_once __DIR__.'/helpers/GitParser.php';
include_once __DIR__.'/helpers/PhpChecker.php';
$art = <<<ART
 ██████╗ ██████╗
██╔═══██╗╚════██╗
██║   ██║ █████╔╝
██║   ██║██╔═══╝
╚██████╔╝███████╗
 ╚═════╝ ╚══════╝
ART;
Console::log($art, 'light_cyan');

// проверяем версию чекера
$config       = file_get_contents(__DIR__.'/../config.json');
$config       = json_decode($config,true);
$remoteConfig = file_get_contents('https://raw.githubusercontent.com/dzantiev/docs/master/config.json?v='.uniqid());
$remoteConfig = json_decode($remoteConfig,true);

if($remoteConfig['version'] != $config['version'])
{
	Console::log("UPDATE CHECKER AVALIBLE NEW VERSION {$remoteConfig['version']}", 'red');
	Console::log("Run git pull in docs/ folder", 'red');
	throw new Exception('UPDATE CHECKER');
}
Console::log("Checker Version..............ok", 'green');


$stagedFiles = GitParser::getStagedFiles();
// определяем игнорируемые файлы
// удаляем их из списка проверки
$handle = fopen(__DIR__.'/.ignore', "r");
if($handle)
{
	while (($ignoreLine = fgets($handle)) !== false)
	{
		$ignoreLine = str_replace(PHP_EOL, '', $ignoreLine);
		foreach ($stagedFiles as $stagedFileKey => $stagedFile)
		{
			$needle = "/{$ignoreLine}$/";
			if (preg_match($needle, $stagedFile))
				unset($stagedFiles[$stagedFileKey ]);
		}
	}
}

// проверки
$phpCheck    = PhpChecker::run($stagedFiles);
$hasErrors   = false;
foreach ($phpCheck as $checkName => $errors)
{
	if(is_array($errors) && count($errors))
	{
		$hasErrors = true;
		Console::log("{$checkName}", 'yellow');
		foreach ($errors as $error)
			Console::log("{$error}", 'red');
	}
	else
		Console::log("{$checkName}..............ok", 'green');
}

if($hasErrors)
	throw new Exception('ERRORS');