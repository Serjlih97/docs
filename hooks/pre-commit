#!/usr/bin/php
<?php
include_once __DIR__.'/helpers/console.php';
include_once __DIR__.'/helpers/GitParser.php';
include_once __DIR__.'/helpers/PhpChecker.php';
include_once __DIR__.'/helpers/HtmlChecker.php';
$art = <<<ART
 ██████╗ ██████╗
██╔═══██╗╚════██╗
██║   ██║ █████╔╝
██║   ██║██╔═══╝
╚██████╔╝███████╗
 ╚═════╝ ╚══════╝
ART;
Console::log($art, 'light_cyan');

// проверяем версию чекера
$config       = file_get_contents(__DIR__.'/../config.json');
$config       = json_decode($config,true);
$remoteConfig = file_get_contents('https://raw.githubusercontent.com/dzantiev/docs/master/config.json?v='.uniqid());
$remoteConfig = json_decode($remoteConfig,true);

if($remoteConfig['version'] != $config['version'])
{
	exec('cd docs && git pull && cd ../');
	Console::log("Checker updated new version {$remoteConfig['version']}", 'green');
	Console::log("Commit again", 'red');
	throw new Exception('Checker Updated');
}
Console::log("Checker Version..............ok", 'green');


$stagedFiles = GitParser::getStagedFiles();
// определяем игнорируемые файлы
// удаляем их из списка проверки
if(file_exists(__DIR__.'/.ignore'))
{
	$handle = fopen(__DIR__.'/.ignore', "r");
	if($handle)
	{
		while (($ignoreLine = fgets($handle)) !== false)
		{
			$ignoreLine = str_replace(PHP_EOL, '', $ignoreLine);
			foreach ($stagedFiles as $stagedFileKey => $stagedFile)
			{
				$needle = "/{$ignoreLine}$/";
				if (preg_match($needle, $stagedFile))
					unset($stagedFiles[$stagedFileKey ]);
			}
		}
	}
}

// проверки
$errorArrays              = [];
$errorArrays['phpCheck']  = PhpChecker::run($stagedFiles);
$errorArrays['htmlCheck'] = HtmlChecker::run($stagedFiles);

// собираем все проверки в один массив для вывода
$errors = [];
foreach ($errorArrays as $checkArray)
	foreach ($checkArray as $checkedSectionName => $checkedSectionArray)
		if(array_key_exists($checkedSectionName, $errors))
			$errors[$checkedSectionName] = array_merge($errors[$checkedSectionName],$checkedSectionArray);
		else
			$errors[$checkedSectionName] = $checkedSectionArray;

$hasErrors   = false;
$errorsCount = 0;
foreach ($errors as $errorsSectionName => $errorsSection)
{
	if(is_array($errorsSection) && count($errorsSection))
	{
		$hasErrors = true;
		$errorsCount += count($errorsSection);
		Console::log("{$errorsSectionName}", 'yellow');
		foreach ($errorsSection as $error)
			Console::log("{$error}", 'red');
	}
	else
		Console::log("{$errorsSectionName}..............ok", 'green');
}

if($hasErrors)
{
	// отправка уведомлений в телеграм
	if(file_exists(__DIR__.'/../telegram.json'))
	{
		$telegram = file_get_contents(__DIR__.'/../telegram.json');
		$telegram = json_decode($telegram,true);
		$userName = GitParser::getUserName();
		$userName = str_replace(' ', '+', $userName);
		$message  = "<b>{$userName}</b>+make+<b>{$errorsCount}</b>+errors!";
		file_get_contents("https://api.telegram.org/bot{$telegram['token']}/sendMessage?chat_id={$telegram['chatId']}&text={$message}&parse_mode=html");
	}

	throw new Exception('ERRORS');
}
